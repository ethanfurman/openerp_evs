#!/usr/local/bin/suid-python --virtualenv
"""
Produce graphs for various bits of OpenERP
"""

from __future__ import print_function
from scription import *
from antipathy import Path
from openerplib import get_connection
import networkx as nx
import psycopg2
import os
import random

VIRTUAL_ENV = Path(os.environ['VIRTUAL_ENV'])

# API

@Script()
def setup():
    global CONFIG, SERVER_CONFIG
    SERVER_CONFIG = OrmFile(VIRTUAL_ENV/'config/server.conf', plain=True)
    CONFIG = OrmFile(VIRTUAL_ENV/'config/fnx.ini')


@Command(
    modules=('module', MULTI),
    output=('where graph image will be saved', OPTION),
    complete=('include uninstalled ancestors', FLAG),
    prog=('program to create graph', OPTION),
    )
def ancestors(modules, output, complete, prog='dot'):
    "show modules that depend on MODULE"
    G = nx.DiGraph()
    for m in modules:
        G.add_node('m')
    get_ancestors(G, complete, *modules)
    draw_module_graph(G, output, prog=prog, modules=modules)


@Command(
    modules=('module', MULTI),
    output=('where graph image will be saved', OPTION),
    complete=('include uninstalled ancestors', FLAG),
    prog=('program to create graph', OPTION),
    )
def centered_on(modules, output, complete, prog='dot'):
    G = nx.DiGraph()
    for m in modules:
        G.add_node(m)
    get_ancestors(G, complete, *modules)
    get_dependents(G, *modules)
    draw_module_graph(G, output, prog=prog, modules=modules)


@Command(
    modules=('module', MULTI),
    output=('where graph image will be saved', OPTION),
    prog=('program to create graph', OPTION),
    )
def requires(modules, output, prog='dot'):
    "show dependencies for modules"
    G = nx.DiGraph()
    for m in modules:
        G.add_node('m')
    get_dependents(G, *modules)
    draw_module_graph(G, output, prog=prog, modules=modules)


@Command(
    output=('where graph image will be saved', OPTION),
    prog=('program to create graph', OPTION),
    list=('print names, not graph', FLAG),
    )
def installed_modules(output, prog='dot', list=False):
    "create dependency graph for all installed modules"
    modules = get_installed_modules()
    print('installed modules are: %r' % modules, verbose=not list)
    if list:
        return
    G = nx.DiGraph()
    for m in modules:
        deps = get_info(m)['depends']
        for d in deps:
            G.add_edge(m, d)
    draw_module_graph(G, output, prog=prog)


@Command(
    output=('filename to save graph to', ),
    prog=('program to use to draw graph', ),
    tables=('tables to graph', ),
    )
def table(output, prog='dot', *tables):
    oe = get_connection(
            hostname=CONFIG.openerp.host,
            database=CONFIG.openerp.db,
            login=CONFIG.openerp.user,
            password=CONFIG.openerp.pw,
            )
    G = nx.MultiDiGraph()
    for table in tables:
        table = oe.get_model(table)
        node = build_table_description(table)
        node
        G.add_node(table._name)
        for field, column in table._columns.items():
            if column.type not in ('one2many', 'many2one', 'many2many') or column.relation not in tables:
                continue
            print('adding %s.%s' % (table._name, field))
            if column.type == 'one2many':
                text = 'o2m: %s->%s' % (field, column.relation)
            elif column.type == 'many2one':
                text = 'm2o: %s->id' % (field, )
            elif column.type == 'many2many':
                text = 'm2m: %s->%s' % (field, column.relation)
            G.add_node(column.relation)
            G.add_edge(table._name, column.relation, label=text, style='inv')
    draw_table_graph(G, output, prog)

@Command(
        table=Spec('main table', ),
        criteria=Spec('oe search criteria', type=eval),
        output=Spec('file to save graph into', OPTION),
        limit=Spec('how many levels to go', OPTION, type=int),
        tables=Spec('other tables to check for linkages', MULTI),
        omit=Spec('table:fields to omit', MULTI, None),
        include=Spec('table:fields to include (non-relational)', MULTI, None),
        )
def record(table, criteria, output, limit, tables, omit, include):
    global oe, skip_fields, keep_fields
    oe = get_connection(
            hostname=CONFIG.openerp.host,
            database=CONFIG.openerp.db,
            login=CONFIG.openerp.user,
            password=CONFIG.openerp.pw,
            )
    skip_fields = set()
    for tf in omit:
        o_table, o_field = tf.split(':')
        skip_fields.add((o_table, o_field))
    keep_fields = {}
    for tf in include:
        i_table, i_field = tf.split(':')
        keep_fields.setdefault(i_table, set()).add(i_field)
    tables = (table, ) + tables
    stored = {}
    G = nx.MultiDiGraph()
    table = oe.get_model(table)
    oe_tables[table._name] = table
    records = table.read(criteria)
    print('found %s records' % len(records))
    get_links(G, table, records, 0, limit, stored, tables)
    draw_table_graph(G, output, 'dot')


# helpers

oe_tables = {}
table_colors = {}
colors = [
        'aquamarine', 'bisque', 'brown1', 'burlywood1', 'cadetblue1',
        'chartreuse', 'cornflowerblue', 'darkgoldenrod1', 'darkseagreen', 'hotpink',
        'lightskyblue', 'orange', 'plum', 'violet', 'yellow',
        ]
random.shuffle(colors)

def get_links(G, table, records, depth=0, limit=None, stored=None, tables=(), reverse_target=None):
    print('=' * 50, verbose=3)
    indent = ' ' * depth * 3 + '|'
    if table._name not in table_colors:
        if colors:
            table_colors[table._name] = colors.pop()
        else:
            table_colors[table._name] = 'white'
    table_color = table_colors[table._name]
    for record in records:
        current_node_id = stored.get((table._name, record.id))
        if current_node_id is None:
            current_node_id = len(G)
            text = [
                    'table: %s' % table._name,
                    'id: %s' % record.id,
                    'record: %r' % record[table._rec_name],
                    ]
            for include_field in sorted(keep_fields.get(table._name, ())):
                text.append('%s: %r' % (include_field, record[include_field]))
            text = '\n'.join(text)
            G.add_node(current_node_id, color=table_color, style='filled', label=text)
            stored[table._name, record.id] = current_node_id
        for field, column in table._columns.items():
            if (
                    column.type not in ('one2many', 'many2one', 'many2many')
                    or column.relation not in tables
                    or field in (
                        'create_uid', 'write_uid',
                        # 'alias_user_id',
                        'message_follower_ids', 'message_follower_user_ids',
                        )
                    or (table._name, field) in skip_fields
                ):
                continue
            print('%sFIELD -- %s::%s -> %s [%s]' % (indent, table._name, field, column.relation, column.type), verbose=2)
            sub_table = oe_tables.get(column.relation)
            if sub_table is None:
                oe_tables[column.relation] = sub_table = oe.get_model(column.relation)
            if sub_table._name not in table_colors:
                if colors:
                    table_colors[sub_table._name] = colors.pop()
                else:
                    table_colors[sub_table._name] = 'white'
            sub_table_color = table_colors[sub_table._name]
            if column.type == 'many2one':
                if not record[field]:
                    continue
                sub_record = sub_table.read(record[field])
                print('%s  sub-record: %r' % (indent, sub_record.id), verbose=3)
                print('%s stored: %r' % (indent, stored), verbose=4)
                sub_node_id = stored.get((sub_table._name, sub_record.id))
                print('%s  sub_node_id: %r' % (indent, sub_node_id), verbose=3)
                descent = depth
                if [sub_table._name, field] in table._inherits:
                    descent -= 1
                if (
                        limit is None
                        or descent < limit
                        or (
                            descent == limit
                            and reverse_target == (column.relation, sub_record.id)
                            )
                    ):
                    if sub_node_id is None:
                        sub_node_id = len(G)
                        text = [
                                'table: %s' % sub_table._name,
                                'id: %s' % sub_record.id,
                                'record: %r' % sub_record[sub_table._rec_name],
                                ]
                        for include_field in sorted(keep_fields.get(sub_table._name, ())):
                            text.append('%s: %r' % (include_field, sub_record[include_field]))
                        text = '\n'.join(text)
                        G.add_node(sub_node_id, color=sub_table_color, style='filled', label=text)
                        stored[sub_table._name, sub_record.id] = sub_node_id
                    get_links(
                            G,
                            sub_table, [sub_record],
                            descent+1, limit, stored, tables,
                            reverse_target=(table._name, field, record.id),
                            )
                if sub_node_id is not None and not stored.get((current_node_id, sub_node_id, field)):
                    print('%sEDGE -- %s::%s --> %s' % (indent, table._name, field, sub_table._name), verbose=2)
                    G.add_edge(current_node_id, sub_node_id, color='blue', label=field)
                    stored[current_node_id, sub_node_id, field] = True
            elif column.type == 'one2many':
                for sub_record in sub_table.read(record[field]):
                    sub_node_id = stored.get((sub_table._name, sub_record.id))
                    if (
                            limit is None
                            or depth < limit
                            or (
                                depth == limit
                                and reverse_target == (column.relation, column.relation_field, sub_record.id)
                                )
                        ):
                        if sub_node_id is None:
                            sub_node_id = len(G)
                            text = [
                                    'table: %s' % sub_table._name,
                                    'id: %s' % sub_record.id,
                                    'record: %r' % sub_record[sub_table._rec_name],
                                    ]
                            for include_field in sorted(keep_fields.get(sub_table._name, ())):
                                text.append('%s: %r' % (include_field, sub_record[include_field]))
                            text = '\n'.join(text)
                            G.add_node(sub_node_id, color=sub_table_color, style='filled', label=text)
                            stored[sub_table._name, sub_record.id] = sub_node_id
                        get_links(
                                G,
                                sub_table, [sub_record],
                                depth+1, limit, stored, tables,
                                reverse_target=(table._name, sub_record.id),
                                )
                    if sub_node_id is not None and not stored.get((current_node_id, sub_node_id, field)):
                        print('%sEDGE -- %s::%s --> %s::%s' % (indent, table._name, field, sub_table._name, column.relation_field), verbose=2)
                        G.add_edge(current_node_id, sub_node_id, color='green', label=field)
                        stored[current_node_id, sub_node_id, field] = True
            elif column.type == 'many2many':
                for sub_record in sub_table.read(record[field]):
                    sub_node_id = stored.get((sub_table._name, sub_record.id))
                    if sub_node_id is None:
                        sub_node_id = len(G)
                        text = [
                                'table: %s' % sub_table._name,
                                'id: %s' % sub_record.id,
                                'record: %r' % sub_record[sub_table._rec_name],
                                ]
                        for include_field in sorted(keep_fields.get(sub_table._name, ())):
                            text.append('%s: %r' % (include_field, sub_record[include_field]))
                        text = '\n'.join(text)
                        G.add_node(sub_node_id, color=sub_table_color, style='filled', label=text)
                        stored[sub_table._name, sub_record.id] = sub_node_id
                    if limit is None or depth < limit or field.relation == reverse_target:
                        get_links(G, sub_table, [sub_record], depth+1, limit, stored, tables, reverse_target=field.relation)
                    if not stored.get((current_node_id, sub_node_id, field)):
                        print('%sEDGE -- %s::%s --> %s' % (indent, table._name, field, sub_table._name), verbose=2)
                        G.add_edge(current_node_id, sub_node_id, color='pink', label=field)
                        stored[current_node_id, sub_node_id, field] = True


def build_table_description(table):
    oe_tables[table._name] = table
    lines = [table._name, '====================']
    lines
    if table._inherits:
        pass

def get_ancestors(G, complete, *modules):
    modules_to_check = set(modules)
    if complete:
        possible_modules = set()
        for d in (VIRTUAL_ENV/'openerp/addons').glob('*'):
            print('checking "%s"...' % d, verbose=3)
            if d.exists('__openerp__.py'):
                print('good, adding', verbose=3)
                possible_modules.add(d.filename)
            else:
                print('skipping', verbose=3)
    else:
        possible_modules = set(get_installed_modules())
    does_not_exist = [m for m in modules if m not in possible_modules]
    if does_not_exist:
        return
    # create dependency mapping
    deps = {}
    for m in possible_modules:
        deps[m] = set(get_info(m)['depends'])
    # create graph of ancestor modules
    adding = True
    while adding:
        adding = False
        for p, d in deps.items():
            for m in list(modules_to_check):
                if m in d and (p, m) not in G.edges:
                    print('ancestor:  %s -> %s' % (p, m))
                    kwds = {}
                    if p in modules or m in modules:
                        kwds['color'] = 'green'
                    G.add_edge(p, m, **kwds)
                    modules_to_check.add(p)
                    adding = True

def get_dependents(G, *modules):
    all_modules = set()
    modules_to_check = set(modules)
    while True:
        if not modules_to_check:
            break
        print('all_modules: %r' % sorted(all_modules), verbose=3)
        print('checking:    %r' % sorted(modules_to_check), verbose=3)
        for m in list(modules_to_check):
            print('              %r' % m, end='', verbose=3)
            all_modules.add(m)
            modules_to_check.remove(m)
            deps = get_info(m)['depends']
            print(' -> %r' % deps, verbose=3)
            for d in deps:
                print('dependent:  %r -> %r' % (m, d))
                if d not in all_modules:
                    modules_to_check.add(d)
                kwds = {}
                if m in modules or d in modules:
                    kwds['color'] = 'orange'
                G.add_edge(m, d, **kwds)

def draw_module_graph(G, filename, prog, modules=()):
    # pos = nx.drawing.nx_agraph.pygraphviz_layout(G)
    # G.layout(prog='neato')
    # G.draw(filename)
    for m in modules:
        node = G.node[m]
        node['style'] = 'filled'
        node['shape'] = 'box'
    # draw any not-installed modules in red
    installed_modules = get_installed_modules()
    missing = set()
    for n in G.nodes:
        print('\nchecking node: %r...' % (n, ), end='', verbose=2)
        if n not in installed_modules:
            print('colorizing %s' % n, verbose=2)
            G.node[n]['color'] = 'red'
            missing.add(n)
    # draw arrows to missing modules in red
    for s, d in G.edges:
        echo(s, d)
        if s in missing:
            G.edges[s, d]['color'] = 'red'
    A = nx.drawing.nx_agraph.to_agraph(G)
    if prog == 'dot':
        # dot only
        # A.graph_attr['ordering'] = 'out'
        A.graph_attr['newrank'] = False
    # any
    A.graph_attr['concentrate'] = False
    A.graph_attr['pad'] = 0.25
    A.graph_attr['fontsize'] = 10
    graph = A.draw(prog=prog, format='png')
    if filename is not None:
        echo('opening %r' % filename)
        with open(filename, 'wb') as graph_file:
            graph_file.write(graph)
    else:
        echo(graph, end='')

def draw_table_graph(G, filename, prog):
    # pos = nx.drawing.nx_agraph.pygraphviz_layout(G)
    # G.layout(prog='neato')
    # G.draw(filename)
    A = nx.drawing.nx_agraph.to_agraph(G, )
    if prog == 'dot':
        # dot only
        # A.graph_attr['ordering'] = 'out'
        A.graph_attr['newrank'] = False
    # any
    A.graph_attr['concentrate'] = False
    A.graph_attr['pad'] = 1
    A.graph_attr['fontsize'] = 12
    graph = A.draw(prog=prog, format='png')
    if filename is not None:
        with open(filename, 'wb') as graph_file:
            graph_file.write(graph)
    else:
        echo(graph, end='')

def get_installed_modules():
    "returns names of all installed modules"
    conn = psycopg2.connect(
            dbname=SERVER_CONFIG.options.db_name,
            user=SERVER_CONFIG.options.db_user,
            password=SERVER_CONFIG.options.db_password,
            host=SERVER_CONFIG.options.db_host,
            port=SERVER_CONFIG.options.db_port,
            )
    try:
        cur = conn.cursor()
        cur.execute("select name from ir_module_module where state='installed' or state='to upgrade';")
        records = cur.fetchall()
        return sorted([r[0] for r in records])
    finally:
        conn.close()

def get_info(module):
    "returns __openerp__ dictionary of module (taken from OpenERP 7.0://modules/module.py)"
    terp_file = VIRTUAL_ENV/'openerp/addons'/module/'__openerp__.py'
    info = {
        'depends': [],
        }
    if terp_file.exists():
        # default values for description
        info = {
            'application': False,
            'author': '',
            'auto_install': False,
            'category': 'Uncategorized',
            'data': [],
            'demo': [],
            'demo_xml': [],
            'depends': [],
            'description': '',
            'init_xml': [],
            'installable': True,
            'license': 'AGPL-3',
            'name': False,
            'post_load': None,
            'update_xml': [],
            'version': '1.0',
            'web': False,
            'website': '',
            'sequence': 100,
            'summary': '',
        }
        f = open(terp_file)
        try:
            info.update(eval(f.read()))
        finally:
            f.close()
        if 'active' in info:
            # 'active' has been renamed 'auto_install'
            info['auto_install'] = info['active']
            del info['active']
        if info['update_xml']:
            info['data'].extend(info['update_xml'])
            del info['update_xml']
    return info

# do it

Run()
