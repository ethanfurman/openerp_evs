#!/usr/bin/python
from __future__ import print_function
from datetime import datetime
from antipathy import Path
from scription import Command, Alias, Execute, Run, abort, print, FLAG, OPTION
import re

@Command(
        regex=('pattern to match against file and directory names', ),
        path=('starting path (defaults to cwd)', OPTION, 'p', Path),
        files_only=('only search file names', FLAG),
        dirs_only=('only search dir names', FLAG),
        timestamp=('display timestamp of file', FLAG),
        all=('show all files/directories (even hidden)', FLAG),
        execute=('run command on each file found (%s is substituted with path', OPTION),
        )
@Alias('fs')
def filesearch(files_only, dirs_only, timestamp, all, path, execute, *regex):
    "Searches for `name` in `path`."
    print('searching %s for %r ' % (path, regex), ('', '(files only)')[files_only], ('', '(dirs only)')[dirs_only], sep='')
    if execute:
        # weed out %%s
        temp = execute.replace('%%s', '')
        if '%s' not in temp:
            # fix execute
            execute += ' %s'
        print('and executing %r for each found' % execute)
    base = ''
    if path is None:
        base = path = Path.getcwd()
    if not regex:
        regex = ('.*')
    for tree, dirs, files in path.walk():
        if not execute:
            print('  ', tree, verbose=2)
        dirs.sort()
        files.sort()
        if not files_only:
            for d in dirs:
                for p in regex:
                    if not (all or p.startswith('^\.')):
                        continue
                    if re.search(p, d):
                        target = tree/d-base
                        if execute:
                            print('executing', execute % target, verbose=2)
                            history = Execute(execute % target)
                            for stream in ('stdout', 'stderr'):
                                stream = getattr(history, stream)
                                if stream:
                                    print(stream, end='')
                            if history.returncode:
                                abort('%r returned code %r' % (execute % target, history.returncode))
                        else:
                            if timestamp:
                                print(datetime.fromtimestamp((tree/d).stat()[8]), '   ', target, verbose=0)       # mtime
                            else:
                                print(target, verbose=0)       # mtime
        if not dirs_only:
            for f in files:
                for p in regex:
                    if not (all or p.startswith('^\.')):
                        continue
                    if re.search(p, f):
                        target = tree/f-base
                        if execute:
                            print('executing', execute % target, verbose=2)
                            history = Execute(execute % target)
                            for stream in ('stdout', 'stderr'):
                                stream = getattr(history, stream)
                                if stream:
                                    print(stream, end='')
                            if history.returncode:
                                abort('%r returned code %r' % (execute % target, history.returncode))
                        else:
                            if timestamp:
                                print(datetime.fromtimestamp((tree/f).stat()[8]), '   ', target, verbose=0)       # mtime
                            else:
                                print(target, verbose=0)       # mtime

Run()
