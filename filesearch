#!/usr/bin/env python2.7
from __future__ import print_function
from datetime import datetime
from antipathy import Path
from scription import *
import os
import re

@Command(
        regex=('pattern to match against file and directory names', ),
        path=('starting path (defaults to cwd)', MULTI, 'p', Path),
        files_only=('only search file names', FLAG),
        dirs_only=('only search dir names', FLAG),
        timestamp=('display timestamp of file', FLAG),
        hidden=('show hidden files/directories', FLAG),
        execute=('run command on each file found (replaceable options: %one %all)', OPTION),
        abort=Spec('quit if any error', FLAG, None, force_default=True),
        env=('only search in $PATH (implies FILES-ONLY)', FLAG, None),
        blank=('print blank line in between directories', FLAG),
        )
@Alias('fs')
def filesearch(files_only, dirs_only, timestamp, hidden, path, execute, env, abort, blank, *regex):
    "Searches for directories/files that match REGEX in PATH."
    print('files_only: %r\ndirs_only: %r\ntimestamp: %r\nhidden: %r\npath: %r\nexecute: %r\nenv: %r\nregex: %r'
            % (files_only, dirs_only, timestamp, hidden, path, execute, env, regex),
            border='box',
            verbose=3,
            )
    if env:
        if path:
            abort('cannot specify both PATH and ENV')
        if dirs_only:
            abort('cannot specify both DIRS-ONLY and ENV')
        path = [Path(p) for p in os.environ['PATH'].split(':')]
        files_only = True
    print('searching %s for %r ' % (', '.join(path), regex), ('', '(files only)')[files_only], ('', '(dirs only)')[dirs_only], sep='')
    single = True
    if execute:
        if '%all' in execute:
            single = False
            execute = execute.replace('%all', '%s')
        elif '%one' in execute:
            single = True
            execute = execute.replace('%one', '%s')
        # weed out %%s
        temp = execute.replace('%%s', '')
        if '%s' not in temp:
            # fix execute
            execute += ' %s'
        print('and executing %r for each found' % execute)
    base = ''
    if not path:
        base = Path.getcwd()
        path = [base]
    if not regex:
        regex = ('.*', )
    if any(r.startswith(r'^\.') for r in regex):
        hidden = True
    print('files_only: %r\ndirs_only: %r\ntimestamp: %r\nhidden: %r\npath: %r\nexecute: %r\nenv: %r\nregex: %r'
            % (files_only, dirs_only, timestamp, hidden, path, execute, env, regex),
            border='box',
            verbose=3,
            )
    output = False
    for search_path in path:
        for tree, dirs, files in search_path.walk():
            need_newline = True
            print('processing', tree)
            if not execute:
                print('  ', tree, verbose=2)
            dirs.sort()
            files.sort()
            found_dirs = []
            skip_dirs = []
            if env:
                dirs[:] = []
            else:
                for d in dirs:
                    for p in regex:
                        if not hidden and d.startswith('.'):
                            skip_dirs.append(d)
                        elif not files_only:
                            if re.search(p, d):
                                target = tree/d-base
                                if execute:
                                    if single:
                                        command(execute % target, abort)
                                    else:
                                        found_dirs.append(target)
                                else:
                                    if blank and need_newline:
                                        echo()
                                        need_newline = False
                                        output = True
                                    if timestamp:
                                        echo(datetime.fromtimestamp((tree/d).stat()[8]), '   ', target)       # mtime
                                    else:
                                        echo(target)       # mtime
                dirs[:] = [d for d in dirs if d not in skip_dirs]
                if found_dirs:
                    command(execute % ' '.join(found_dirs), abort)
            if not dirs_only:
                found_files = []
                for f in files:
                    for p in regex:
                        if hidden or not f.startswith('.'):
                            if re.search(p, f):
                                target = tree/f-base
                                if execute:
                                    if single:
                                        command(execute % target, abort)
                                    else:
                                        found_files.append(target)
                                else:
                                    if blank and need_newline:
                                        echo()
                                        need_newline = False
                                        output = True
                                    if timestamp:
                                        echo(datetime.fromtimestamp((tree/f).stat()[8]), '   ', target)       # mtime
                                    else:
                                        echo(target)       # mtime
                if found_files:
                    command(execute % ' '.join(found_files), abort)
    if blank and output:
        # put a blank line at the very end
        echo()

def command(command, abort_on_error):
    print('executing', command, verbose=2)
    history = Execute(command)
    for stream in ('stdout', 'stderr'):
        stream = getattr(history, stream)
        if stream:
            print(stream, end='')
    if history.returncode:
        if abort_on_error:
            abort('%r returned code %r' % (command, history.returncode))
        else:
            error('%r returned code %r' % (command, history.returncode))

Run()
