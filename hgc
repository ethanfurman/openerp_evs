#!/usr/bin/env python

from getpass import getpass
from antipathy import Path
from scription import Command, Execute, Main, OPTION, REQUIRED

search = (
    Path('/usr/lib/pymodules/python2.7'),
    Path('/usr/local/bin'),
    Path('/opt'),
    )

def workhorse(*path):
    """
    yields paths with are mercurial repos
    """
    if not path:
        path = search
    for p in path:
        for current, dirs, files in p.walk():
            if '.bak/' in current or current.endswith('.bak'):
                continue
            if '.hg' in dirs:
                yield current

@Command(
    path=('base path to search', OPTION, 'p', Path),
    )
def incoming(*path):
    """
    displays changesets in remote repo not present locally
    """
    for repo in workhorse(*path):
        history = Execute(('hg incoming'), timeout=30, cwd=repo)
        stdout = history.stdout
        stderr = history.stderr
        if stderr or stdout:
            print repo
            print '=' * 76
            if not stdout.strip().endswith('no changes found'):
                print stdout
                print
            if stderr:
                print stderr
                print
        print

@Command(
    date=('date to check for commits [YYYY-MM-DD]', REQUIRED),
    path=('base path to search', OPTION, 'p', Path),
    )
def log_date(date, *path):
    "displays all log entries for matching date"
    for repo in workhorse(*path):
        history = Execute(('hg', 'log', '--date', date), timeout=30, cwd=repo)
        stdout = history.stdout
        stderr = history.stderr
        if stderr or stdout:
            print repo
            print '=' * 76
            if stdout:
                print stdout
                print
            if stderr:
                print stderr
                print
        print

@Command(
    path=('base path to search', OPTION, 'p', Path),
    )
def outgoing(*path):
    """
    displays changesets in local repo not present remotely
    """
    for repo in workhorse(*path):
        history = Execute(('hg outgoing'), timeout=30, cwd=repo)
        stdout = history.stdout
        stderr = history.stderr
        if stderr or stdout:
            print repo
            print '=' * 76
            if not stdout.strip().endswith('no changes found'):
                print stdout
                print
            if stderr:
                print stderr
                print
        print

@Command(
    path=('base path to search', OPTION, 'p', Path),
    )
def parent(*path):
    "displays parent of active branch"
    for repo in workhorse(*path):
        history = Execute(('hg', 'parent', '--template', '{rev}: {desc}'), timeout=30, cwd=repo)
        stdout = history.stdout
        stderr = history.stderr
        if stderr or stdout:
            print repo
            print '=' * 76
            if stdout:
                print stdout
                print
            if stderr:
                print stderr
                print
        print

@Command(
    path=('base path to search', OPTION, 'p', Path),
    )
def list(*path):
    """
    displays all repos
    """
    for repo in workhorse(*path):
        print repo


@Command(
    repo=('repository to pull [default: all]', OPTION),
    path=('base path to search', OPTION, 'p', Path),
    )
def pull(repo, *path):
    '''
    retrieve remote change sets
    '''

    password = getpass('[mercurial] password: ')
    print
    target = repo
    for repo in workhorse(*path):
        if target and repo.filename != target:
            continue
        print repo
        print '=' * 76
        history = Execute(('hg', 'pull'), timeout=30, cwd=repo, password=password, pty=True)
        stdout = history.stdout
        stderr = history.stderr
        returncode = history.returncode
        if not stdout.strip().endswith('no changes found') or returncode:
            print stdout
            print
        if stderr:
            print stderr
            print
        print

@Command(
    repo=('repository to push [default: all]', OPTION),
    path=('base path to search', OPTION, 'p', Path),
    )
def push(repo, *path):
    '''
    send local changesets to remote repo
    '''
    password = getpass('[mercurial] password: ')
    target = repo
    for repo in workhorse(*path):
        if target and repo.filename != target:
            continue
        print repo
        print '=' * 76
        history = Execute(('hg', 'push'), timeout=30, cwd=repo, password=password, pty=True)
        stdout = history.stdout
        stderr = history.stderr
        returncode = history.returncode
        if not stdout.strip().endswith('no changes found') or returncode not in (0, 1):
            print stdout
            print
        if stderr:
            print stderr
            print
        print

@Command(
    path=('base path to search', OPTION, 'p', Path),
    )
def status(*path):
    '''
    display status for each repo
    '''
    for repo in workhorse(*path):
        print repo
        print '=' * 76
        history = Execute(('hg', 'status'), timeout=30, cwd=repo)
        parent = Execute(('hg', 'parent'), timeout=30, cwd=repo)
        latest = Execute(('hg', 'log', '-l1'), timeout=30, cwd=repo)
        stdout = history.stdout
        stderr = history.stderr
        returncode = history.returncode
        if stdout or returncode:
            print stdout
            print
        if stderr:
            print stderr
            print
        if parent.stdout != latest.stdout:
            print
            print 'latest version ' + latest.stdout[15:]
            print 'running version ' + parent.stdout[16:]
        print

@Command(
    repo=('repository to update [default: all]', OPTION),
    path=('base path to search', OPTION, 'p', Path),
    )
def update(repo, *path):
    '''
    update active files to latest default version
    '''
    target = repo
    for repo in workhorse(*path):
        if target and repo.filename != target:
            continue
        print repo
        print '=' * 76
        history = Execute(('hg', 'update', 'default'), timeout=30, cwd=repo)
        stdout = history.stdout
        stderr = history.stderr
        returncode = history.returncode
        stdout = stdout.strip().split('\n')
        last_line = ''
        if stdout:
            last_line = stdout[-1]
        if last_line == '0 files updated, 0 files merged, 0 files removed, 0 files unresolved' and not returncode:
            stdout = None
        if stderr or stdout:
            print repo
            print '=' * 76
        if stdout:
            print '\n'.join(stdout)
            print
        if stderr:
            print stderr
            print
        parent = Execute(('hg', 'parent'), timeout=30, cwd=repo)
        latest = Execute(('hg', 'log', '-l1'), timeout=30, cwd=repo)
        if parent.stdout != latest.stdout:
            print 'latest version ' + latest.stdout[15:]
            print 'running version ' + parent.stdout[16:]
        print
Main()
