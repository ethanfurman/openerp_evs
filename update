#!/usr/local/sbin/suid-python --virtualenv
from __future__ import print_function

from antipathy import Path
from xaml import Xaml
from scription import *

import grp
import pwd
import sys

self = Path(sys.argv[0])
mode = self.stat().st_mode

@Command(
        repo=Spec('root directory of repo', type=Path, force_default=''),
        )
def set_owner_of(repo):
    "sets the root directory owner as owner of all sub-files/directories"
    repo = repo or get_current_repo()
    print('setting owner of:', repo)
    stat = repo.stat()
    uid = stat.st_uid
    gid = stat.st_gid
    print('to:', uid, gid)
    user = pwd.getpwuid(uid).pw_name
    group = grp.getgrgid(gid).gr_name
    print('   ', user, group)
    job = Execute('chown -R %s:%s %s' % (user, group, repo))
    echo(job.stdout, end='')
    error(job.stderr, end='')
    print('return code:', job.returncode)
    return job.returncode

@Command(
        repo=Spec('root directory of repo', type=Path, force_default=''),
        )
def add_group_write_to(repo):
    "adds the group write permission bit"
    print('adding write bit to', repo)
    job = Execute('chmod -R g+w %s' % repo)
    echo(job.stdout, end='')
    error(job.stderr, end='')
    print('return code:', job.returncode)
    return job.returncode

@Command(
        repo=Spec('root directory of repo', type=Path, force_default=''),
        )
def install_to_opt_bin(repo):
    "copies files specified in repo/.hgupdate_install to /opt/bin"
    print('getting install file from', repo)
    for install in ('.hgupdate_install', '.install_scripts'):
        if repo.exists(install):
            break
        else:
            print('no such file')
            return
    lines = [l.strip() for l in open(repo/install).readlines() if l.strip()]
    opt_bin = Path('/opt/bin')
    # pre-screen
    error_lines = []
    for line in lines:
        if len(line.split()) not in (1, 2, 3):
            error_lines.append(line)
    if error_lines:
        abort('unable to process %d lines:\n  %r' % (len(error_lines), '\n  '.join(error_lines)))
    for line in lines:
        names = line.split()
        suid = False
        if names[-1] in ('--suid', '--no-suid'):
            suid = names[-1] == '--suid'
            names.pop()
        if len(names) == 1:
            src = repo/names[0]
            dst = opt_bin/(src.filename)
            echo('  %s --> %s' % (names[0], dst))
            src.copy(dst)
        elif len(names) == 2:
            src, dst = names
            src = repo/src
            dst = opt_bin/dst
            if not dst.dirname.exists():
                dst.dirname.mkdir()
            echo('  %s --> %s' % (names[0], dst))
            src.copy(dst)
        else:
            abort('THIS SHOULD NOT HAPPEN -- unable to process %d-item line: <%r>' % (len(names), line))
        dst.chown(0, 0)
        if dst.ext:
            dst.chmod(0o0444)
        elif not suid:
            dst.chmod(0o0755)
        else:
            dst.chmod(0o6755)

@Command(
        )
def update():
    repo = get_current_repo()
    install_to_opt_bin(repo)
    add_group_write_to(repo)
    set_owner_of(repo)
    xamlize(repo)

@Command(
        root=Spec('directory tree to check for xaml files', REQUIRED, default='.'),
        )
def xamlize(root):
    for dirpath, dirnames, filenames in Path(root).walk():
        if dirpath == 'report':
            for report_name in filenames:
                if file.ext != '.xaml':
                    continue
                echo(dirpath/report_name)
                with open(dirpath/report_name) as src:
                    xaml_doc = Xaml(src.read()).document
                    if len(xaml_doc.pages) != 2:
                        raise ValueError('%s should have an xml and an xsl component' % report_name)
                    for page in xaml_doc.pages:
                        with open(report_name.strip_ext() + '.' + page.ml.type, 'wb') as dst:
                            dst.write(page.bytes())
        else:
            for file in filenames:
                if file.ext != '.xaml':
                    continue
                echo(dirpath/file)
                with open(dirpath/file) as src:
                    xaml_doc = Xaml(src.read()).document
                    for page in xaml_doc.pages:
                        with open(dirpath/(file.strip_ext() + '.' + page.ml.type), 'wb') as dst:
                            dst.write(page.bytes())

def get_current_repo():
    cwd = Path.getcwd()
    for p in cwd.ascend():
        if p.exists('.git'):
            return p
    else:
        raise ValueError('repo not found')

with user_ids(0, 0):
    try:
        Main()
    finally:
        if self.stat().st_mode != mode:
            self.chmod(mode)
