#!/usr/local/bin/python
from __future__ import print_function

from antipathy import Path
from hg_tools import extract_hg
from scription import *

import ast
import re
import traceback
try:
    from pyflakes.api import check as Flakes
    from pyflakes.reporter import Reporter
except ImportError:
    print('pyflakes not installed')
    Flakes = Reporter = None


@Command(
        pyflakes=Spec('enable pyflakes checks (if available)', FLAG, envvar='PYFLAKES'),
        files=Spec('files to check for syntax errors', OPTION, type=Path),
        )
def hgsanity(pyflakes=True, *files):
    "Check for syntax errors, tab indentation, and trailing whitespace"
    if not files:
        print('getting hg info')
        hg = extract_hg()
        if not hg.names:
            abort('hgsanity should be called with filenames to check, or as an hg hook')
        repo = Path(hg.pending)
    else:
        print('no repo')
        repo = None
    notes = Notes()
    for file in hg.files:
        if repo:
            path = repo / file
        else:
            path = file
        if not repo and path.isdir():
            print('skipping dir', path)
            # no recursing yet
            continue
        if repo and not path.exists():
            print('skipping removed file', path)
            # file is being removed
            continue
        print('getting filetype of', path)
        checker = filetype(path)
        if checker:
            print('  checking', path)
            checker(path, notes, pyflakes)
    if notes:
        notes.insert(0, '-' * 75 + '\n')
        notes.append('-' * 75)
        print(' ', '  '.join(notes), file=stderr)
        raise SystemExit(1)

def check_python(path, notes, lint):
    "path is the file to check, notes is a list to update with problems"
    with open(path) as f:
        data = f.read()
    lastfile = None
    try:
        # first check for syntax errors
        ast.parse(data, path)
    except Exception as e:
        lastfile = path
        notes.extend(traceback.format_exception_only(type(e), e))
    else:
        filename = path.filename
        # then check mixed tab indentation and trailing whitespace,
        # and forgotten pdb.set_trace()
        for i, line in enumerate(data.split('\n'), start=1):
            if re.search('\s+#.*do not commit.*', line, re.IGNORECASE):
                # catch don't commit comments
                notes.append('%s:%d: do not commit this file\n' % (filename, i))
                continue
            elif re.search('\s*#', line):
                # ignore other comment lines
                continue
            if re.search('pdb\s*\.\s*set_trace\s*(\s*)', line):
                if lastfile not in (None, path):
                    notes.append('-' * 75 + '\n')
                    lastfile = path
                notes.append('%s:%d: pdb.''set_trace() found\n' % (filename, i))
            for ch in line:
                if ch not in ' \t':
                    break
                elif ch == '\t':
                    if lastfile not in (None, path):
                        notes.append('-' * 75 + '\n')
                        lastfile = path
                    notes.append('%s:%d: tab indentation\n' % (filename, i))
                    break
            if line and line[-1] in ' \t':
                if lastfile not in (None, path):
                    notes.append('-' * 75 + '\n')
                    lastfile = path
                notes.append('%s:%d: trailing whitespace\n' % (filename, i))
        # run through pyflakes if available
        if lint and Flakes is not None:
            reporter = Reporter(notes, notes)
            Flakes(data, path, reporter=reporter)

def check_xml(path, notes, _):
    "path is the file to check, notes is a list to update with problems"
    with open(path) as f:
        data = f.read()
    lastfile = None
    for i, line in enumerate(data.split('\n'), start=1):
        if re.search('\s+<!--.*do not commit.*', line, re.IGNORECASE):
            # catch don't commit comments
            notes.append('%s: do not commit this file\n' % (path, ))
            break
        for ch in line:
            if ch not in ' \t':
                break
            elif ch == '\t':
                if lastfile not in (None, path):
                    notes.append('-' * 75 + '\n')
                    lastfile = path
                notes.append('%s: tab indentation in line %d\n' % (path, i))
                break
        if line and line[-1] in ' \t':
            if lastfile not in (None, path):
                notes.append('-' * 75 + '\n')
                lastfile = path
            notes.append('%s: trailing whitespace in line %d\n' % (path, i))


def filetype(path):
    if (
            path.ext == '.py'
            or (path.ext == '' and firstline(path).startswith('#!') and 'python' in firstline(path))
        ):
        return check_python
    elif path.ext == '.xml':
        return check_xml
    else:
        return None

def firstline(path):
    with open(path) as f:
        return f.readline()

class Notes(list):
    "list with a write method"

    def write(self, text):
        self.append(text)


Main()
