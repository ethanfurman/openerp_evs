#!/usr/local/sbin/suid-python --virtualenv
from __future__ import print_function

from antipathy import Path
from scription import *

import grp
import pwd

@Command(
        repo=Spec('root directory of repo', type=Path),
        )
def set_owner_of(repo):
    "sets the root directory owner as owner of all sub-files/directories"
    print('setting owner of:', repo)
    stat = repo.stat()
    uid = stat.st_uid
    gid = stat.st_gid
    print('to:', uid, gid)
    user = pwd.getpwuid(uid).pw_name
    group = grp.getgrgid(gid).gr_name
    print('   ', user, group)
    job = Execute('chown -R %s:%s %s' % (user, group, repo))
    echo(job.stdout, end='')
    error(job.stderr, end='')
    print('return code:', job.returncode)
    raise SystemExit(job.returncode)

@Command(
        repo=Spec('root directory of repo', type=Path),
        )
def add_group_write_to(repo):
    "adds the group write permission bit"
    print('adding write bit to', repo)
    job = Execute('chmod -R g+w %s' % repo)
    echo(job.stdout, end='')
    error(job.stderr, end='')
    print('return code:', job.returncode)
    raise SystemExit(job.returncode)

@Command(
        repo=Spec('root directory of repo', type=Path),
        )
def install_to_opt_bin(repo):
    "copies files specified in repo/.hgupdate_install to /opt/bin"
    print('getting install file from', repo)
    if not repo.exists('.hgupdate_install'):
        print('no such file')
        return
    lines = open(repo/'.hgupdate_install').readlines()
    opt_bin = Path('/opt/bin')
    # pre-screen
    error_lines = []
    for line in lines:
        if len(line.split()) not in (1, 2, 3):
            error_lines.append(line)
    if error_lines:
        abort('unable to process %d lines:\n  %r' % (len(lines), '\n  '.join(error_lines)))
    for line in lines:
        names = line.split()
        suid = True
        if names[-1] in ('--suid', '--no-suid'):
            suid = names[-1] == '--suid'
            names.pop()
        if len(names) == 1:
            src = repo/names[0]
            dst = opt_bin/(src.filename)
            src.copy(dst)
        elif len(names) == 2:
            src, dst = names
            src = repo/src
            dst = opt_bin/dst
            if not dst.dirname.exists():
                dst.dirname.mkdir()
            src.copy(dst)
        else:
            abort('THIS SHOULD NOT HAPPEN -- unable to process %d-item line: <%r>' % (len(names), line))
        dst.chown(0, 0)
        if dst.ext:
            dst.chmod(0o0444)
        elif not suid:
            dst.chmod(0o0755)
        else:
            dst.chmod(0o6755)


Main()
