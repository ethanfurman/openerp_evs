#!/usr/bin/env python
from __future__ import print_function

from collections import defaultdict
from scription import *
from VSS.BBxXlate import fisData
from antipathy import Path
import random
import re

SOURCE = Path('/var/fis/production/')
ARCHIVE = Path('/var/openerp/archive/production/')
ERRORS = Path('/var/openerp/archive/production/error')
USER_PW_DB = Path('/etc/openerp/credentials')

execfile(USER_PW_DB)


@Command(
        filenum=Spec('file abbreviation or number to operate on', default='all', type=unicode.upper),
        which=Spec('which field to display', default='all', type=unicode.upper),
        )
def field_check(filenum, which):
    if filenum != 'all':
        if filenum.isdigit():
            filenum = int(filenum)
        files = [filenum]
    else:
        files = [k for k in fisData.tables if isinstance(k, (int, long))]
    for filenum in files:
        print('file: %s' % (filenum,), end=' ', verbose=0)
        try:
            table = fisData.fisData(filenum)
        except fisData.TableError, exc:
            print('<%s>' % exc.__doc__, verbose=0)
            continue
        if which != 'all':
            fields = [which]
        else:
            fields = [f for f in table.datamap if '$' not in f]
        print('(%d records, %d fields)' % (len(table), len(fields)), end='  ', verbose=0)
        ints = floats = 0
        bad_values = defaultdict(lambda: defaultdict(int))
        for record in table.values():
            for field in fields:
                val = record[field]
                try:
                    int(val)
                    ints += 1
                except ValueError:
                    try:
                        float(val)
                        floats += 1
                    except ValueError:
                        bad_values[field][val] += 1
        print('-- int: %s  --  float: %s' % (ints, floats), verbose=0)
        if bad_values:
            for field, values in bad_values.items():
                print('     %s: %s' % (field, ', '.join(repr(v) for v in values.items())), verbose=0)
        table.release()


@Command(
        filenum=Spec('file abbreviation or number to operate on', ),
        # which=Spec('which record to display', choices=['random', 'last', int], default='random'),
        which=Spec('which record to display', choices=['random', 'last'], default='random'),
        )
def record(filenum, which):
    table = fisData.fisData(filenum)
    if which == 'last':
        print(table[-1], verbose=0)
    elif which == 'random':
        print(random.choice(table.values()), verbose=0)
    elif isinstance(which, (int, long)):
        print(table[which], verbose=0)


@Command(
        filenum=Spec('file abbreviation or number to display', ),
        output=Spec('output type', choices=['dump','enum'], default='dump'),
        )
def schema(filenum, output):
    if filenum.isdigit():
        filenum = int(filenum)
    table = fisData.tables[filenum]
    if output == 'dump':
        max_width = 0
        for field in table['fields']:
            max_width = max(max_width, len(field[1]))
        max_width += 10
        print(table['name'], table['desc'], table['filenum'], verbose=0)
        dotted = True
        for i, field in enumerate(table['fields']):
            if not i % 3:
                dotted = not dotted
            name = '  ' + field[1]
            spec = field[3]
            if dotted:
                name += '.' * (max_width - len(name))
            else:
                name += ' ' * (max_width - len(name))
            print(name, spec, verbose=0)
    elif output == 'enum':
        print('class F%d(str, Enum):' % table['filenum'], verbose=0)
        print('    """', verbose=0)
        print('    %s - %s' % (table['name'], table['desc'].strip('-')), verbose=0)
        print('    """', verbose=0)
        lines = []
        for field in table['fields']:
            name, spec = field[1:4:2]
            comment = name
            name = name.lower()
            if '(' in name:
                name = name.split('(')[0]
            if name.endswith(' number'):
                name = name[:-6] + 'id'
            pieces = name.split()
            if pieces and pieces[0].isdigit() and pieces[1:2] == ['spaces']:
                pieces = pieces[2:]
            for i, p in enumerate(pieces):
                if len(p) == 3 and '/' in p:
                    pieces[i] = p[0] + p[2]
            name = ' '.join(pieces)
            if name.startswith(('key type', 'key group')):
                name = 'key type'
            member = []
            for i, piece in enumerate(re.sub('\W+', ' ', name).split()):
                if i == 0 and piece[0].isdigit():
                    piece = {
                            '0':    'zero',
                            '1':    'one',
                            '2':    'two',
                            '3':    'three',
                            '4':    'four',
                            '5':    'five',
                            '6':    'six',
                            '7':    'seven',
                            '8':    'eight',
                            '9':    'nine',
                            '10':   'ten',
                            '1st':  'first',
                            '2nd':  'second',
                            '3rd':  'third',
                            '4th':  'fourth',
                            '5th':  'fifth',
                            '6th':  'sixth',
                            '7th':  'seventh',
                            '8th':  'eighth',
                            '9th':  'ninth',
                            '10th': 'tenth',
                            }.get(piece, piece)
                else:
                    piece = {
                            'authority':  'auth',
                            'center':     'ctr',
                            'centering':  'ctr',
                            'code':       'id',
                            'codes':      'ids',
                            'department': 'dept',
                            'description':'desc',
                            'ingredient': 'ingr',
                            'length':     'len',
                            'numbers':    'nos',
                            'number':     'no',
                            'product':    'prod',
                            'production': 'prod',
                            'position':   'pos',
                            'quantity':   'qty',
                            'revision':   'rev',
                            'sequence':   'seq',
                            'string':     'str',
                            }.get(piece, piece)
                member.append(piece)
            name = '_'.join(member)
            lines.append((name, spec, comment))
        #calculate widths
        max_name = max([len(n) for n, s, c in lines])
        max_spec = max([len(s) for n, s, c in lines])
        for name, spec, comment in lines:
            if name:
                print('    %-*s = %-*s     # %s' % (max_name, name, max_spec, spec, comment), verbose=0)
            else:
                print(' ' * (max_name + max_spec + 11), '# %s %s' % (comment, spec), verbose=0)
    else:
        abort('unknown output type: %s' % output)

Main()
